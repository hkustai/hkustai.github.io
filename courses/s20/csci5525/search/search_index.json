{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CSCI 5525! Syllabus Machine Learning is about how we make predictions and decisions based on data. This course covers the theory and practical algorithms for machine learning from a variety of perspectives. We cover topics such as support vector machines, neural networks, boosting, statistical learning methods, unsupervised learning, online learning, and reinforcement learning. Logistics Course : CSCI 5525, Spring 2020 Location : Keller Hall 3-230 Time : Mondays, 6:30 PM\u20119:00 PM Communication Canvas : We will be using Canvas for all assignments and grades. Please also post all questions on Canvas as discussions instead of sending emails. Email : If you email your instructor, you must include the substring \"CSCI 5525\" to begin a meaningful subject line and have tried to resolve the issue appropriately otherwise. For example, you should post questions about course material and homework assignments on Canvas first, and then use emails only after an appropriate amount of time has passed without a response. Please use your UMN email account. Course Staff Instructor : Steven Wu Email : zsw@umn.edu Office hours : Monday 4:00-5:00 PM Location : 6-225E Keller Hall Teaching Assistant : Wei Dai Email : dai00074@umn.edu Office hours : Wedsnesday 1:30 \u2013 2:30 PM; Friday 9:45 - 10:45 AM Location : 2-246 Keller Hall FAQ Who should take this course? Advanced undergraduates or graduate students interested in machine learning. What are the pre-requisites? Ideally you will have completed CSCI 5521 or equivalently other introduction to machine learning courses. You should also have (1) undergraduate level training or coursework in linear algebra, multivariate calculus, and basic probability and statistics, and (2) programming skills with Python. Will there be programming? Yes, there will be programming. Will there be math? Yes, a lot.","title":"About"},{"location":"#welcome-to-csci-5525","text":"","title":"Welcome to CSCI 5525!"},{"location":"#syllabus","text":"Machine Learning is about how we make predictions and decisions based on data. This course covers the theory and practical algorithms for machine learning from a variety of perspectives. We cover topics such as support vector machines, neural networks, boosting, statistical learning methods, unsupervised learning, online learning, and reinforcement learning.","title":"Syllabus"},{"location":"#logistics","text":"Course : CSCI 5525, Spring 2020 Location : Keller Hall 3-230 Time : Mondays, 6:30 PM\u20119:00 PM","title":"Logistics"},{"location":"#communication","text":"Canvas : We will be using Canvas for all assignments and grades. Please also post all questions on Canvas as discussions instead of sending emails. Email : If you email your instructor, you must include the substring \"CSCI 5525\" to begin a meaningful subject line and have tried to resolve the issue appropriately otherwise. For example, you should post questions about course material and homework assignments on Canvas first, and then use emails only after an appropriate amount of time has passed without a response. Please use your UMN email account.","title":"Communication"},{"location":"#course-staff","text":"Instructor : Steven Wu Email : zsw@umn.edu Office hours : Monday 4:00-5:00 PM Location : 6-225E Keller Hall Teaching Assistant : Wei Dai Email : dai00074@umn.edu Office hours : Wedsnesday 1:30 \u2013 2:30 PM; Friday 9:45 - 10:45 AM Location : 2-246 Keller Hall","title":"Course Staff"},{"location":"#faq","text":"Who should take this course? Advanced undergraduates or graduate students interested in machine learning. What are the pre-requisites? Ideally you will have completed CSCI 5521 or equivalently other introduction to machine learning courses. You should also have (1) undergraduate level training or coursework in linear algebra, multivariate calculus, and basic probability and statistics, and (2) programming skills with Python. Will there be programming? Yes, there will be programming. Will there be math? Yes, a lot.","title":"FAQ"},{"location":"calendar/","text":"Course Schedule (Tentative) Lecture Date Topic Readings Notes 1 1/27 Course overview Lecture 1 Supervised Learning 2 Linear Regression (Part 1) UML 9.2 ESL 3.2 Lecture 2 3 2/3 Linear Regression (Part 2) UML 11.2 ESL 3.4, 7.10 Lecture 3 4 Linear Classification Gradient Descent UML 12 ESL 4.1-4.2, 4.4 Lecture 4 5 2/10 Logistic Regression UML 9.3 Lecture 5 6 Support Vector Machine (Part 1) Lagrange Duality UML 15 ESL 12.1-12.3 Lecture 6 Scribble 6 2/16 HW 1 Due 7 2/17 Support Vector Machine (Part 2) ESL 12.1-12.3 UML 15 Lecture 7 8 Kernels ESL 5.8, 6.3, 6.7 UML 16, 20 Lecture 8 Scribble 8 9 2/24 Neural Networks (Part 1) DL Book 6 Lecture 9 10 Neural Networks (Part 2) DL Book 8 Lecture 10 3/1 HW 2 Due Learning Theory 11 3/2 Neural Networks (Part 3) Convolutional Neural Networks DL Book 8 Lecture 11 12 Learning Theory (Part 1) Lecture 12 3/9 Spring Break Course moving online due to COVID-19 13 Learninig Theory (Part 2) UML 4, 6 Lecture 13 14 Learninig Theory (Part 3) UML 4, 6, 26 Lecture 14 3/29 HW 3 Due Ensemble methods 15 AdaBoost (Part 1) Decision Trees Boosting Book 3, 5 UML 10.2, 18 Lecture 15 16 AdaBoost (Part 2) Boosting Book 3, 5 Lecture 16 17 Gradient Boosting ESL 10.9 10.10 Lecture 17 18 Bagging Random Forest ESL 15 Lecture 18 4/15 HW 4 Due Unsupervised Learning 19 PCA ESL 14.5 Lecture 19 20 Kernel PCA Maximum Likelihood Estimation ESL 14.5 Lecture 20 21 Gaussian Mixture Model Expectation-Maximization ESL 8.5 Lecture 21 22-23 Variational Autoencoder Lecture 22-23 24 Generative Adversarial Nets Lecture 24 Interactive Learning 25 Online Learning (Part 1) Halving and Percepron Lecture 25 26 Online Learning (Part 2) Multiplicative Weights (MW) Note by J.K. 5/4 HW 5 Due 5/8 Takehome Due","title":"Calendar"},{"location":"calendar/#course-schedule-tentative","text":"Lecture Date Topic Readings Notes 1 1/27 Course overview Lecture 1 Supervised Learning 2 Linear Regression (Part 1) UML 9.2 ESL 3.2 Lecture 2 3 2/3 Linear Regression (Part 2) UML 11.2 ESL 3.4, 7.10 Lecture 3 4 Linear Classification Gradient Descent UML 12 ESL 4.1-4.2, 4.4 Lecture 4 5 2/10 Logistic Regression UML 9.3 Lecture 5 6 Support Vector Machine (Part 1) Lagrange Duality UML 15 ESL 12.1-12.3 Lecture 6 Scribble 6 2/16 HW 1 Due 7 2/17 Support Vector Machine (Part 2) ESL 12.1-12.3 UML 15 Lecture 7 8 Kernels ESL 5.8, 6.3, 6.7 UML 16, 20 Lecture 8 Scribble 8 9 2/24 Neural Networks (Part 1) DL Book 6 Lecture 9 10 Neural Networks (Part 2) DL Book 8 Lecture 10 3/1 HW 2 Due Learning Theory 11 3/2 Neural Networks (Part 3) Convolutional Neural Networks DL Book 8 Lecture 11 12 Learning Theory (Part 1) Lecture 12 3/9 Spring Break Course moving online due to COVID-19 13 Learninig Theory (Part 2) UML 4, 6 Lecture 13 14 Learninig Theory (Part 3) UML 4, 6, 26 Lecture 14 3/29 HW 3 Due Ensemble methods 15 AdaBoost (Part 1) Decision Trees Boosting Book 3, 5 UML 10.2, 18 Lecture 15 16 AdaBoost (Part 2) Boosting Book 3, 5 Lecture 16 17 Gradient Boosting ESL 10.9 10.10 Lecture 17 18 Bagging Random Forest ESL 15 Lecture 18 4/15 HW 4 Due Unsupervised Learning 19 PCA ESL 14.5 Lecture 19 20 Kernel PCA Maximum Likelihood Estimation ESL 14.5 Lecture 20 21 Gaussian Mixture Model Expectation-Maximization ESL 8.5 Lecture 21 22-23 Variational Autoencoder Lecture 22-23 24 Generative Adversarial Nets Lecture 24 Interactive Learning 25 Online Learning (Part 1) Halving and Percepron Lecture 25 26 Online Learning (Part 2) Multiplicative Weights (MW) Note by J.K. 5/4 HW 5 Due 5/8 Takehome Due","title":"Course Schedule (Tentative)"},{"location":"org/","text":"Course Organization Lectures Lectures have two formats: whiteboard presentation and slides presentation. Attending lectures is absolutely critical. Slides and lecture notes will be made available after lectures, but they will be difficult to understand in isolation. Readings will cover some---but not all---of the course material. Readings Most lectures are paired with a reading. These are optional and classes will not exactly follow the readings, but you will get more out of the lectures if you skim the readings afterwards. Readings will be drawn from these books: UML : Understanding Machine Learning: From Theory to Algorithms by Shai Shalev-Shwartz and Shai Ben-David MLaPP : Machine Learning: a Probabilistic Perspective by Kevin Patrick Murphy ESL : The Elements of Statistical Learning: by Trevor Hastie, Robert Tibshirani, and Jerome Friedman You are welcome to buy physical copies if you wish---they're good books!---but the online versions will suffice for this course. Homeworks Each homework will have two parts: a programming component and a written component. There will be 5 homeworks in total, issued roughly every two weeks. Homeworks will generally be posted after lecture on Thursday, and are due roughly two weeks later before lecture. Keep an eye on the calendar! Late homework will not be accepted ---we will not have a late day policy. Instead, your lowest homework score will be dropped. Limited partial credit is possible for partial homework solutions. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with. Midterm and Final exam Due to COVID-19, there will be no midterm exam. We will have a take-home final exam. Grading Policy Your grade will be based on these components: Homeworks : 72% Final Exam : 18% Participation : 10% Your lowest homework score will be dropped.","title":"Organization"},{"location":"org/#course-organization","text":"","title":"Course Organization"},{"location":"org/#lectures","text":"Lectures have two formats: whiteboard presentation and slides presentation. Attending lectures is absolutely critical. Slides and lecture notes will be made available after lectures, but they will be difficult to understand in isolation. Readings will cover some---but not all---of the course material.","title":"Lectures"},{"location":"org/#readings","text":"Most lectures are paired with a reading. These are optional and classes will not exactly follow the readings, but you will get more out of the lectures if you skim the readings afterwards. Readings will be drawn from these books: UML : Understanding Machine Learning: From Theory to Algorithms by Shai Shalev-Shwartz and Shai Ben-David MLaPP : Machine Learning: a Probabilistic Perspective by Kevin Patrick Murphy ESL : The Elements of Statistical Learning: by Trevor Hastie, Robert Tibshirani, and Jerome Friedman You are welcome to buy physical copies if you wish---they're good books!---but the online versions will suffice for this course.","title":"Readings"},{"location":"org/#homeworks","text":"Each homework will have two parts: a programming component and a written component. There will be 5 homeworks in total, issued roughly every two weeks. Homeworks will generally be posted after lecture on Thursday, and are due roughly two weeks later before lecture. Keep an eye on the calendar! Late homework will not be accepted ---we will not have a late day policy. Instead, your lowest homework score will be dropped. Limited partial credit is possible for partial homework solutions. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with.","title":"Homeworks"},{"location":"org/#midterm-and-final-exam","text":"Due to COVID-19, there will be no midterm exam. We will have a take-home final exam.","title":"Midterm and Final exam"},{"location":"org/#grading-policy","text":"Your grade will be based on these components: Homeworks : 72% Final Exam : 18% Participation : 10% Your lowest homework score will be dropped.","title":"Grading Policy"},{"location":"syllabus/","text":"","title":"Syllabus"},{"location":"assets/custom-js/katex/","text":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web. Fast: KaTeX renders its math synchronously and doesn't need to reflow the page. See how it compares to a competitor in this speed test . Print quality: KaTeX\u2019s layout is based on Donald Knuth\u2019s TeX, the gold standard for math typesetting. Self contained: KaTeX has no dependencies and can easily be bundled with your website resources. Server side rendering: KaTeX produces the same output regardless of browser or environment, so you can pre-render expressions using Node.js and send them as plain HTML. KaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, Edge, and IE 9 - IE 11. More information can be found on the list of supported commands and on the wiki . Usage You can download KaTeX and host it on your server or include the katex.min.js and katex.min.css files on your page directly from a CDN: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css\" integrity=\"sha384-BTL0nVi8DnMrNdMQZG1Ww6yasK9ZGnUxL1ZWukXQ7fygA1py52yPp9W4wrR00VML\" crossorigin=\"anonymous\"> <script src=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.js\" integrity=\"sha384-y6SGsNt7yZECc4Pf86XmQhC4hG2wxL6Upkt9N1efhFxfh6wlxBH0mJiTE8XYclC1\" crossorigin=\"anonymous\"></script> In-browser rendering Call katex.render with a TeX expression and a DOM element to render into: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element); To avoid escaping the backslash (double backslash), you can use String.raw (but beware that ${ , \\u and \\x may still need escaping): katex.render(String.raw`c = \\pm\\sqrt{a^2 + b^2}`, element); If KaTeX can't parse the expression, it throws a katex.ParseError error. Server side rendering or rendering to a string To generate HTML on the server or to generate an HTML string of the rendered math, you can use katex.renderToString : var html = katex.renderToString(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\"); // '<span class=\"katex\">...</span>' Make sure to include the CSS and font files, but there is no need to include the JavaScript. Like render , renderToString throws if it can't parse the expression. Security Any HTML generated by KaTeX should be safe from <script> or other code injection attacks. (See maxSize below for preventing large width/height visual affronts, and see maxExpand below for preventing infinite macro loop attacks.) Of course, it is always a good idea to sanitize the HTML, though you will need a rather generous whitelist (including some of SVG and MathML) to support all of KaTeX. Handling errors If KaTeX encounters an error (invalid or unsupported LaTeX) and throwOnError hasn't been set to false , then it will throw an exception of type katex.ParseError . The message in this error includes some of the LaTeX source code, so needs to be escaped if you want to render it to HTML. In particular, you should convert & , < , > characters to &amp; , &lt; , &gt; (e.g., using _.escape ) before including either LaTeX source code or exception messages in your HTML/DOM. (Failure to escape in this way makes a <script> injection attack possible if your LaTeX source is untrusted.) Alternatively, you can set throwOnError to false to use built-in behavior of rendering the LaTeX source code with hover text stating the error. Rendering options You can provide an object of options as the last argument to katex.render and katex.renderToString . Available options are: displayMode : boolean . If true the math will be rendered in display mode, which will put the math in display style (so \\int and \\sum are large, for example), and will center the math on the page on its own line. If false the math will be rendered in inline mode. (default: false ) throwOnError : boolean . If true (the default), KaTeX will throw a ParseError when it encounters an unsupported command or invalid LaTeX. If false , KaTeX will render unsupported commands as text, and render invalid LaTeX as its source code with hover text giving the error, in the color given by errorColor . errorColor : string . A color string given in the format \"#XXX\" or \"#XXXXXX\" . This option determines the color that unsupported commands and invalid LaTeX are rendered in when throwOnError is set to false . (default: #cc0000 ) macros : object . A collection of custom macros. Each macro is a property with a name like \\name (written \"\\\\name\" in JavaScript) which maps to a string that describes the expansion of the macro. Single-character keys can also be included in which case the character will be redefined as the given macro (similar to TeX active characters). This object will be modified if the LaTeX code defines its own macros via \\gdef , which enables consecutive calls to KaTeX to share state. colorIsTextColor : boolean . If true , \\color will work like LaTeX's \\textcolor , and take two arguments (e.g., \\color{blue}{hello} ), which restores the old behavior of KaTeX (pre-0.8.0). If false (the default), \\color will work like LaTeX's \\color , and take one argument (e.g., \\color{blue}hello ). In both cases, \\textcolor works as in LaTeX (e.g., \\textcolor{blue}{hello} ). maxSize : number . All user-specified sizes, e.g. in \\rule{500em}{500em} , will be capped to maxSize ems. If set to Infinity (the default), users can make elements and spaces arbitrarily large. maxExpand : number . Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity , the macro expander will try to fully expand as in LaTeX. (default: 1000) strict : boolean or string or function (default: \"warn\" ). If false or \"ignore \", allow features that make writing LaTeX convenient but are not actually supported by (Xe)LaTeX (similar to MathJax). If true or \"error\" (LaTeX faithfulness mode), throw an error for any such transgressions. If \"warn\" (the default), warn about such behavior via console.warn . Provide a custom function handler(errorCode, errorMsg, token) to customize behavior depending on the type of transgression (summarized by the string code errorCode and detailed in errorMsg ); this function can also return \"ignore\" , \"error\" , or \"warn\" to use a built-in behavior. A list of such features and their errorCode s: \"unknownSymbol\" : Use of unknown Unicode symbol, which will likely also lead to warnings about missing character metrics, and layouts may be incorrect (especially in terms of vertical heights). \"unicodeTextInMathMode\" : Use of Unicode text characters in math mode. \"mathVsTextUnits\" : Mismatch of math vs. text commands and units/mode. A second category of errorCode s never throw errors, but their strictness affects the behavior of KaTeX: \"newLineInDisplayMode\" : Use of \\\\ or \\newline in display mode (outside an array/tabular environment). In strict mode, no line break results, as in LaTeX. For example: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\\\\in\\\\RR\", element, { displayMode: true, macros: { \"\\\\RR\": \"\\\\mathbb{R}\" } }); Automatic rendering of math on a page Math on the page can be automatically rendered using the auto-render extension. See the Auto-render README for more information. Font size and lengths By default, KaTeX math is rendered in a 1.21\u00d7 larger font than the surrounding context, which makes super- and subscripts easier to read. You can control this using CSS, for example: .katex { font-size: 1.1em; } KaTeX supports all TeX units, including absolute units like cm and in . Absolute units are currently scaled relative to the default TeX font size of 10pt, so that \\kern1cm produces the same results as \\kern2.845275em . As a result, relative and absolute units are both uniformly scaled relative to LaTeX with a 10pt font; for example, the rectangle \\rule{1cm}{1em} has the same aspect ratio in KaTeX as in LaTeX. However, because most browsers default to a larger font size, this typically means that a 1cm kern in KaTeX will appear larger than 1cm in browser units. Common Issues Many Markdown preprocessors, such as the one that Jekyll and GitHub Pages use, have a \"smart quotes\" feature. This changes ' to \u2019 which is an issue for math containing primes, e.g. f' . This can be worked around by defining a single character macro which changes them back, e.g. {\"\u2019\", \"'\"} . KaTeX follows LaTeX's rendering of aligned and matrix environments unlike MathJax. When displaying fractions one above another in these vertical layouts there may not be enough space between rows for people who are used to MathJax's rendering. The distance between rows can be adjusted by using \\\\[0.1em] instead of the standard line separator distance. KaTeX does not support the align environment because LaTeX doesn't support align in math mode. The aligned environment offers the same functionality but in math mode, so use that instead or define a macro that maps align to aligned . MathJax defines \\color to be like \\textcolor by default; set KaTeX's colorIsTextColor option to true for this behavior. KaTeX's default behavior matches MathJax with its color.js extension enabled. Libraries Angular2+ ng-katex Angular module to write beautiful math expressions with TeX syntax boosted by KaTeX library React react-latex React component to render latex strings, based on KaTeX react-katex React components that use KaTeX to typeset math expressions Ruby katex-ruby Provides server-side rendering and integration with popular Ruby web frameworks (Rails, Hanami, and anything that uses Sprockets). Contributing See CONTRIBUTING.md License KaTeX is licensed under the MIT License .","title":"[<img src=\"https://khan.github.io/KaTeX/katex-logo.svg\" width=\"130\" alt=\"KaTeX\">](https://khan.github.io/KaTeX/)"},{"location":"assets/custom-js/katex/#usage","text":"You can download KaTeX and host it on your server or include the katex.min.js and katex.min.css files on your page directly from a CDN: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css\" integrity=\"sha384-BTL0nVi8DnMrNdMQZG1Ww6yasK9ZGnUxL1ZWukXQ7fygA1py52yPp9W4wrR00VML\" crossorigin=\"anonymous\"> <script src=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.js\" integrity=\"sha384-y6SGsNt7yZECc4Pf86XmQhC4hG2wxL6Upkt9N1efhFxfh6wlxBH0mJiTE8XYclC1\" crossorigin=\"anonymous\"></script>","title":"Usage"},{"location":"assets/custom-js/katex/#in-browser-rendering","text":"Call katex.render with a TeX expression and a DOM element to render into: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element); To avoid escaping the backslash (double backslash), you can use String.raw (but beware that ${ , \\u and \\x may still need escaping): katex.render(String.raw`c = \\pm\\sqrt{a^2 + b^2}`, element); If KaTeX can't parse the expression, it throws a katex.ParseError error.","title":"In-browser rendering"},{"location":"assets/custom-js/katex/#server-side-rendering-or-rendering-to-a-string","text":"To generate HTML on the server or to generate an HTML string of the rendered math, you can use katex.renderToString : var html = katex.renderToString(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\"); // '<span class=\"katex\">...</span>' Make sure to include the CSS and font files, but there is no need to include the JavaScript. Like render , renderToString throws if it can't parse the expression.","title":"Server side rendering or rendering to a string"},{"location":"assets/custom-js/katex/#security","text":"Any HTML generated by KaTeX should be safe from <script> or other code injection attacks. (See maxSize below for preventing large width/height visual affronts, and see maxExpand below for preventing infinite macro loop attacks.) Of course, it is always a good idea to sanitize the HTML, though you will need a rather generous whitelist (including some of SVG and MathML) to support all of KaTeX.","title":"Security"},{"location":"assets/custom-js/katex/#handling-errors","text":"If KaTeX encounters an error (invalid or unsupported LaTeX) and throwOnError hasn't been set to false , then it will throw an exception of type katex.ParseError . The message in this error includes some of the LaTeX source code, so needs to be escaped if you want to render it to HTML. In particular, you should convert & , < , > characters to &amp; , &lt; , &gt; (e.g., using _.escape ) before including either LaTeX source code or exception messages in your HTML/DOM. (Failure to escape in this way makes a <script> injection attack possible if your LaTeX source is untrusted.) Alternatively, you can set throwOnError to false to use built-in behavior of rendering the LaTeX source code with hover text stating the error.","title":"Handling errors"},{"location":"assets/custom-js/katex/#rendering-options","text":"You can provide an object of options as the last argument to katex.render and katex.renderToString . Available options are: displayMode : boolean . If true the math will be rendered in display mode, which will put the math in display style (so \\int and \\sum are large, for example), and will center the math on the page on its own line. If false the math will be rendered in inline mode. (default: false ) throwOnError : boolean . If true (the default), KaTeX will throw a ParseError when it encounters an unsupported command or invalid LaTeX. If false , KaTeX will render unsupported commands as text, and render invalid LaTeX as its source code with hover text giving the error, in the color given by errorColor . errorColor : string . A color string given in the format \"#XXX\" or \"#XXXXXX\" . This option determines the color that unsupported commands and invalid LaTeX are rendered in when throwOnError is set to false . (default: #cc0000 ) macros : object . A collection of custom macros. Each macro is a property with a name like \\name (written \"\\\\name\" in JavaScript) which maps to a string that describes the expansion of the macro. Single-character keys can also be included in which case the character will be redefined as the given macro (similar to TeX active characters). This object will be modified if the LaTeX code defines its own macros via \\gdef , which enables consecutive calls to KaTeX to share state. colorIsTextColor : boolean . If true , \\color will work like LaTeX's \\textcolor , and take two arguments (e.g., \\color{blue}{hello} ), which restores the old behavior of KaTeX (pre-0.8.0). If false (the default), \\color will work like LaTeX's \\color , and take one argument (e.g., \\color{blue}hello ). In both cases, \\textcolor works as in LaTeX (e.g., \\textcolor{blue}{hello} ). maxSize : number . All user-specified sizes, e.g. in \\rule{500em}{500em} , will be capped to maxSize ems. If set to Infinity (the default), users can make elements and spaces arbitrarily large. maxExpand : number . Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity , the macro expander will try to fully expand as in LaTeX. (default: 1000) strict : boolean or string or function (default: \"warn\" ). If false or \"ignore \", allow features that make writing LaTeX convenient but are not actually supported by (Xe)LaTeX (similar to MathJax). If true or \"error\" (LaTeX faithfulness mode), throw an error for any such transgressions. If \"warn\" (the default), warn about such behavior via console.warn . Provide a custom function handler(errorCode, errorMsg, token) to customize behavior depending on the type of transgression (summarized by the string code errorCode and detailed in errorMsg ); this function can also return \"ignore\" , \"error\" , or \"warn\" to use a built-in behavior. A list of such features and their errorCode s: \"unknownSymbol\" : Use of unknown Unicode symbol, which will likely also lead to warnings about missing character metrics, and layouts may be incorrect (especially in terms of vertical heights). \"unicodeTextInMathMode\" : Use of Unicode text characters in math mode. \"mathVsTextUnits\" : Mismatch of math vs. text commands and units/mode. A second category of errorCode s never throw errors, but their strictness affects the behavior of KaTeX: \"newLineInDisplayMode\" : Use of \\\\ or \\newline in display mode (outside an array/tabular environment). In strict mode, no line break results, as in LaTeX. For example: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\\\\in\\\\RR\", element, { displayMode: true, macros: { \"\\\\RR\": \"\\\\mathbb{R}\" } });","title":"Rendering options"},{"location":"assets/custom-js/katex/#automatic-rendering-of-math-on-a-page","text":"Math on the page can be automatically rendered using the auto-render extension. See the Auto-render README for more information.","title":"Automatic rendering of math on a page"},{"location":"assets/custom-js/katex/#font-size-and-lengths","text":"By default, KaTeX math is rendered in a 1.21\u00d7 larger font than the surrounding context, which makes super- and subscripts easier to read. You can control this using CSS, for example: .katex { font-size: 1.1em; } KaTeX supports all TeX units, including absolute units like cm and in . Absolute units are currently scaled relative to the default TeX font size of 10pt, so that \\kern1cm produces the same results as \\kern2.845275em . As a result, relative and absolute units are both uniformly scaled relative to LaTeX with a 10pt font; for example, the rectangle \\rule{1cm}{1em} has the same aspect ratio in KaTeX as in LaTeX. However, because most browsers default to a larger font size, this typically means that a 1cm kern in KaTeX will appear larger than 1cm in browser units.","title":"Font size and lengths"},{"location":"assets/custom-js/katex/#common-issues","text":"Many Markdown preprocessors, such as the one that Jekyll and GitHub Pages use, have a \"smart quotes\" feature. This changes ' to \u2019 which is an issue for math containing primes, e.g. f' . This can be worked around by defining a single character macro which changes them back, e.g. {\"\u2019\", \"'\"} . KaTeX follows LaTeX's rendering of aligned and matrix environments unlike MathJax. When displaying fractions one above another in these vertical layouts there may not be enough space between rows for people who are used to MathJax's rendering. The distance between rows can be adjusted by using \\\\[0.1em] instead of the standard line separator distance. KaTeX does not support the align environment because LaTeX doesn't support align in math mode. The aligned environment offers the same functionality but in math mode, so use that instead or define a macro that maps align to aligned . MathJax defines \\color to be like \\textcolor by default; set KaTeX's colorIsTextColor option to true for this behavior. KaTeX's default behavior matches MathJax with its color.js extension enabled.","title":"Common Issues"},{"location":"assets/custom-js/katex/#libraries","text":"","title":"Libraries"},{"location":"assets/custom-js/katex/#angular2","text":"ng-katex Angular module to write beautiful math expressions with TeX syntax boosted by KaTeX library","title":"Angular2+"},{"location":"assets/custom-js/katex/#react","text":"react-latex React component to render latex strings, based on KaTeX react-katex React components that use KaTeX to typeset math expressions","title":"React"},{"location":"assets/custom-js/katex/#ruby","text":"katex-ruby Provides server-side rendering and integration with popular Ruby web frameworks (Rails, Hanami, and anything that uses Sprockets).","title":"Ruby"},{"location":"assets/custom-js/katex/#contributing","text":"See CONTRIBUTING.md","title":"Contributing"},{"location":"assets/custom-js/katex/#license","text":"KaTeX is licensed under the MIT License .","title":"License"},{"location":"assets/custom-js/reveal.js/","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: <html> <head> <link rel=\"stylesheet\" href=\"css/reveal.css\"> <link rel=\"stylesheet\" href=\"css/theme/white.css\"> </head> <body> <div class=\"reveal\"> <div class=\"slides\"> <section>Slide 1</section> <section>Slide 2</section> </div> </div> <script src=\"js/reveal.js\"></script> <script> Reveal.initialize(); </script> </body> </html> The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: <div class=\"reveal\"> <div class=\"slides\"> <section>Single Horizontal Slide</section> <section> <section>Vertical Slide 1</section> <section>Vertical Slide 2</section> </section> </div> </div> Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). <section data-markdown> <textarea data-template> ## Page title A paragraph with some text and a [link](http://hakim.se). </textarea> </section> External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\" data-charset=\"iso-8859-15\"> <!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --> </section> Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. <section data-markdown> <script type=\"text/template\"> - Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" --> - Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" --> </script> </section> Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown. <section data-markdown> <script type=\"text/template\"> <!-- .slide: data-background=\"#ff0000\" --> Markdown content </script> </section> Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, \"edges\" or \"bottom-right\" controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\" // or \"visible\" controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The \"normal\" size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: \"100%\", height: \"100%\", margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in <section> elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for <code> elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: <section data-autoslide=\"2000\"> <p>After 2 seconds the first fragment will be shown.</p> <p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p> <p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p> </section> To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 -> 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 -> 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. <section> <img data-src=\"image.png\"> <iframe data-src=\"http://hakim.se\"></iframe> <video> <source data-src=\"video.webm\" type=\"video/webm\" /> <source data-src=\"video.mp4\" type=\"video/mp4\" /> </video> </section> Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . <section> <iframe data-src=\"http://hakim.se\" data-preload></iframe> </section> You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // <div class=\"reveal\">...</div> Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide <section> , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . <section data-background-color=\"#ff0000\"> <h2>Color</h2> </section> Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-image=\"http://example.com/image.png\"> <h2>Image</h2> </section> <section data-background-image=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\"> <h2>This background image will be sized to 100px and repeated</h2> </section> Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted> <h2>Video</h2> </section> Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. <section data-background-iframe=\"https://slides.com\" data-background-interactive> <h2>Iframe</h2> </section> Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: <section data-transition=\"zoom\"> <h2>This slide will override the presentation transition and zoom!</h2> </section> <section data-transition-speed=\"fast\"> <h2>Choose from three transition speeds: default, fast or slow!</h2> </section> You can also use different in and out transitions for the same slide: <section data-transition=\"slide\"> The train goes on \u2026 </section> <section data-transition=\"slide\"> and on \u2026 </section> <section data-transition=\"slide-in fade-out\"> and stops. </section> <section data-transition=\"fade-in slide-out\"> (Passengers entering and leaving) </section> <section data-transition=\"slide\"> And it starts again. </section> You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( <section id=\"some-slide\"> ): <a href=\"#/2/2\">Link</a> <a href=\"#/some-slide\">Link</a> You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. <a href=\"#\" class=\"navigate-left\"> <a href=\"#\" class=\"navigate-right\"> <a href=\"#\" class=\"navigate-up\"> <a href=\"#\" class=\"navigate-down\"> <a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide --> <a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide --> Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: <section> <p class=\"fragment grow\">grow</p> <p class=\"fragment shrink\">shrink</p> <p class=\"fragment fade-out\">fade-out</p> <p class=\"fragment fade-up\">fade-up (also down, left and right!)</p> <p class=\"fragment fade-in-then-out\">fades in, then out when we move to the next step</p> <p class=\"fragment fade-in-then-semi-out\">fades in, then obfuscate when we move to the next step</p> <p class=\"fragment highlight-current-blue\">blue only once</p> <p class=\"fragment highlight-red\">highlight-red</p> <p class=\"fragment highlight-green\">highlight-green</p> <p class=\"fragment highlight-blue\">highlight-blue</p> </section> Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. <section> <span class=\"fragment fade-in\"> <span class=\"fragment fade-out\">I'll fade in, then out</span> </span> </section> The display order of fragments can be controlled using the data-fragment-index attribute. <section> <p class=\"fragment\" data-fragment-index=\"3\">Appears last</p> <p class=\"fragment\" data-fragment-index=\"1\">Appears first</p> <p class=\"fragment\" data-fragment-index=\"2\">Appears second</p> </section> Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element. <section> <pre><code data-trim data-noescape> (def lazy-fib (concat [0 1] <mark>((fn rfib [a b]</mark> (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) </code></pre> </section> Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // \"h.v\": horizontal . vertical slide number (default) // \"h/v\": horizontal / vertical slide number // \"c\": flattened slide number // \"c/t\": flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the \"showSlideNumber\" value: // \"all\": show on all views (default) // \"speaker\": only show slide numbers on speaker notes view // \"print\": only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: <video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 <video> / <audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: <section> <h2>This video will use up the remaining space on the slide</h2> <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> </section> Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: <window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: <script> var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); </script> Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: <link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\"> If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=\"Something important\"></section> . When used locally, this feature requires that reveal.js runs from a local web server . <section> <h2>Some Slide</h2> <aside class=\"notes\"> Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). </aside> </section> If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section> # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide <section> by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: macros } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2019 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"assets/custom-js/reveal.js/#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"assets/custom-js/reveal.js/#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"assets/custom-js/reveal.js/#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"assets/custom-js/reveal.js/#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"assets/custom-js/reveal.js/#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"assets/custom-js/reveal.js/#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"assets/custom-js/reveal.js/#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"assets/custom-js/reveal.js/#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"assets/custom-js/reveal.js/#instructions","text":"","title":"Instructions"},{"location":"assets/custom-js/reveal.js/#markup","text":"Here's a barebones example of a fully working reveal.js presentation: <html> <head> <link rel=\"stylesheet\" href=\"css/reveal.css\"> <link rel=\"stylesheet\" href=\"css/theme/white.css\"> </head> <body> <div class=\"reveal\"> <div class=\"slides\"> <section>Slide 1</section> <section>Slide 2</section> </div> </div> <script src=\"js/reveal.js\"></script> <script> Reveal.initialize(); </script> </body> </html> The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: <div class=\"reveal\"> <div class=\"slides\"> <section>Single Horizontal Slide</section> <section> <section>Vertical Slide 1</section> <section>Vertical Slide 2</section> </section> </div> </div>","title":"Markup"},{"location":"assets/custom-js/reveal.js/#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). <section data-markdown> <textarea data-template> ## Page title A paragraph with some text and a [link](http://hakim.se). </textarea> </section>","title":"Markdown"},{"location":"assets/custom-js/reveal.js/#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\" data-charset=\"iso-8859-15\"> <!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --> </section>","title":"External Markdown"},{"location":"assets/custom-js/reveal.js/#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. <section data-markdown> <script type=\"text/template\"> - Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" --> - Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" --> </script> </section>","title":"Element Attributes"},{"location":"assets/custom-js/reveal.js/#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown. <section data-markdown> <script type=\"text/template\"> <!-- .slide: data-background=\"#ff0000\" --> Markdown content </script> </section>","title":"Slide Attributes"},{"location":"assets/custom-js/reveal.js/#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"assets/custom-js/reveal.js/#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, \"edges\" or \"bottom-right\" controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\" // or \"visible\" controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"assets/custom-js/reveal.js/#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The \"normal\" size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: \"100%\", height: \"100%\", margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"assets/custom-js/reveal.js/#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in <section> elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for <code> elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"assets/custom-js/reveal.js/#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"assets/custom-js/reveal.js/#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: <section data-autoslide=\"2000\"> <p>After 2 seconds the first fragment will be shown.</p> <p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p> <p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p> </section> To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"assets/custom-js/reveal.js/#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"assets/custom-js/reveal.js/#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"assets/custom-js/reveal.js/#navigation-mode","text":"You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 -> 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 -> 2.3.","title":"Navigation Mode"},{"location":"assets/custom-js/reveal.js/#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"assets/custom-js/reveal.js/#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. <section> <img data-src=\"image.png\"> <iframe data-src=\"http://hakim.se\"></iframe> <video> <source data-src=\"video.webm\" type=\"video/webm\" /> <source data-src=\"video.mp4\" type=\"video/mp4\" /> </video> </section>","title":"Lazy Loading"},{"location":"assets/custom-js/reveal.js/#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . <section> <iframe data-src=\"http://hakim.se\" data-preload></iframe> </section> You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"assets/custom-js/reveal.js/#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // <div class=\"reveal\">...</div>","title":"API"},{"location":"assets/custom-js/reveal.js/#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"assets/custom-js/reveal.js/#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"assets/custom-js/reveal.js/#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"assets/custom-js/reveal.js/#slide-states","text":"If you set data-state=\"somestate\" on a slide <section> , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"assets/custom-js/reveal.js/#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"assets/custom-js/reveal.js/#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . <section data-background-color=\"#ff0000\"> <h2>Color</h2> </section>","title":"Color Backgrounds"},{"location":"assets/custom-js/reveal.js/#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-image=\"http://example.com/image.png\"> <h2>Image</h2> </section> <section data-background-image=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\"> <h2>This background image will be sized to 100px and repeated</h2> </section>","title":"Image Backgrounds"},{"location":"assets/custom-js/reveal.js/#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted> <h2>Video</h2> </section>","title":"Video Backgrounds"},{"location":"assets/custom-js/reveal.js/#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. <section data-background-iframe=\"https://slides.com\" data-background-interactive> <h2>Iframe</h2> </section>","title":"Iframe Backgrounds"},{"location":"assets/custom-js/reveal.js/#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"assets/custom-js/reveal.js/#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"assets/custom-js/reveal.js/#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: <section data-transition=\"zoom\"> <h2>This slide will override the presentation transition and zoom!</h2> </section> <section data-transition-speed=\"fast\"> <h2>Choose from three transition speeds: default, fast or slow!</h2> </section> You can also use different in and out transitions for the same slide: <section data-transition=\"slide\"> The train goes on \u2026 </section> <section data-transition=\"slide\"> and on \u2026 </section> <section data-transition=\"slide-in fade-out\"> and stops. </section> <section data-transition=\"fade-in slide-out\"> (Passengers entering and leaving) </section> <section data-transition=\"slide\"> And it starts again. </section> You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"assets/custom-js/reveal.js/#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( <section id=\"some-slide\"> ): <a href=\"#/2/2\">Link</a> <a href=\"#/some-slide\">Link</a> You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. <a href=\"#\" class=\"navigate-left\"> <a href=\"#\" class=\"navigate-right\"> <a href=\"#\" class=\"navigate-up\"> <a href=\"#\" class=\"navigate-down\"> <a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide --> <a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide -->","title":"Internal links"},{"location":"assets/custom-js/reveal.js/#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: <section> <p class=\"fragment grow\">grow</p> <p class=\"fragment shrink\">shrink</p> <p class=\"fragment fade-out\">fade-out</p> <p class=\"fragment fade-up\">fade-up (also down, left and right!)</p> <p class=\"fragment fade-in-then-out\">fades in, then out when we move to the next step</p> <p class=\"fragment fade-in-then-semi-out\">fades in, then obfuscate when we move to the next step</p> <p class=\"fragment highlight-current-blue\">blue only once</p> <p class=\"fragment highlight-red\">highlight-red</p> <p class=\"fragment highlight-green\">highlight-green</p> <p class=\"fragment highlight-blue\">highlight-blue</p> </section> Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. <section> <span class=\"fragment fade-in\"> <span class=\"fragment fade-out\">I'll fade in, then out</span> </span> </section> The display order of fragments can be controlled using the data-fragment-index attribute. <section> <p class=\"fragment\" data-fragment-index=\"3\">Appears last</p> <p class=\"fragment\" data-fragment-index=\"1\">Appears first</p> <p class=\"fragment\" data-fragment-index=\"2\">Appears second</p> </section>","title":"Fragments"},{"location":"assets/custom-js/reveal.js/#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"assets/custom-js/reveal.js/#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element. <section> <pre><code data-trim data-noescape> (def lazy-fib (concat [0 1] <mark>((fn rfib [a b]</mark> (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) </code></pre> </section>","title":"Code syntax highlighting"},{"location":"assets/custom-js/reveal.js/#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // \"h.v\": horizontal . vertical slide number (default) // \"h/v\": horizontal / vertical slide number // \"c\": flattened slide number // \"c/t\": flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the \"showSlideNumber\" value: // \"all\": show on all views (default) // \"speaker\": only show slide numbers on speaker notes view // \"print\": only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"assets/custom-js/reveal.js/#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"assets/custom-js/reveal.js/#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"assets/custom-js/reveal.js/#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: <video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 <video> / <audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"assets/custom-js/reveal.js/#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"assets/custom-js/reveal.js/#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: <section> <h2>This video will use up the remaining space on the slide</h2> <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> </section> Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"assets/custom-js/reveal.js/#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"assets/custom-js/reveal.js/#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: <window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"assets/custom-js/reveal.js/#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"assets/custom-js/reveal.js/#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"assets/custom-js/reveal.js/#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"assets/custom-js/reveal.js/#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: <script> var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); </script>","title":"Print stylesheet"},{"location":"assets/custom-js/reveal.js/#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"assets/custom-js/reveal.js/#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: <link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\"> If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"assets/custom-js/reveal.js/#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=\"Something important\"></section> . When used locally, this feature requires that reveal.js runs from a local web server . <section> <h2>Some Slide</h2> <aside class=\"notes\"> Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). </aside> </section> If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section> # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"assets/custom-js/reveal.js/#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"assets/custom-js/reveal.js/#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide <section> by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"assets/custom-js/reveal.js/#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"assets/custom-js/reveal.js/#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"assets/custom-js/reveal.js/#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"assets/custom-js/reveal.js/#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"assets/custom-js/reveal.js/#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"assets/custom-js/reveal.js/#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"assets/custom-js/reveal.js/#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: macros } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"assets/custom-js/reveal.js/#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"assets/custom-js/reveal.js/#license","text":"MIT licensed Copyright (C) 2019 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"assets/custom-js/reveal.js/CONTRIBUTING/","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"assets/custom-js/reveal.js/CONTRIBUTING/#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"assets/custom-js/reveal.js/CONTRIBUTING/#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"assets/custom-js/reveal.js/CONTRIBUTING/#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"assets/custom-js/reveal.js/CONTRIBUTING/#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"assets/custom-js/reveal.js/CONTRIBUTING/#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"assets/custom-js/reveal.js/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"assets/custom-js/reveal.js/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"assets/custom-js/reveal.js/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"assets/custom-js/reveal.js/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"assets/custom-js/reveal.js/test/simple/","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"assets/custom-js/reveal.js/test/simple/#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"assets/custom-js/reveal.js/test/simple/#slide-12","text":"","title":"Slide 1.2"},{"location":"assets/custom-js/reveal.js/test/simple/#slide-2","text":"","title":"Slide 2"},{"location":"assets/custom-js/reveal.js.back.js/","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Instructions Markup Here's a barebones example of a fully working reveal.js presentation: <html> <head> <link rel=\"stylesheet\" href=\"css/reveal.css\"> <link rel=\"stylesheet\" href=\"css/theme/white.css\"> </head> <body> <div class=\"reveal\"> <div class=\"slides\"> <section>Slide 1</section> <section>Slide 2</section> </div> </div> <script src=\"js/reveal.js\"></script> <script> Reveal.initialize(); </script> </body> </html> The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: <div class=\"reveal\"> <div class=\"slides\"> <section>Single Horizontal Slide</section> <section> <section>Vertical Slide 1</section> <section>Vertical Slide 2</section> </section> </div> </div> Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). <section data-markdown> <textarea data-template> ## Page title A paragraph with some text and a [link](http://hakim.se). </textarea> </section> External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\" data-charset=\"iso-8859-15\"> <!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --> </section> Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. <section data-markdown> <script type=\"text/template\"> - Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" --> - Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" --> </script> </section> Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown. <section data-markdown> <script type=\"text/template\"> <!-- .slide: data-background=\"#ff0000\" --> Markdown content </script> </section> Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, \"edges\" or \"bottom-right\" controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\" // or \"visible\" controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The \"normal\" size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: \"100%\", height: \"100%\", margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in <section> elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for <code> elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js. Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: <section data-autoslide=\"2000\"> <p>After 2 seconds the first fragment will be shown.</p> <p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p> <p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p> </section> To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. <section> <img data-src=\"image.png\"> <iframe data-src=\"http://hakim.se\"></iframe> <video> <source data-src=\"video.webm\" type=\"video/webm\" /> <source data-src=\"video.mp4\" type=\"video/mp4\" /> </video> </section> API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide <section> , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . <section data-background-color=\"#ff0000\"> <h2>Color</h2> </section> Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-image=\"http://example.com/image.png\"> <h2>Image</h2> </section> <section data-background-image=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\"> <h2>This background image will be sized to 100px and repeated</h2> </section> Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted> <h2>Video</h2> </section> Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. <section data-background-iframe=\"https://slides.com\" data-background-interactive> <h2>Iframe</h2> </section> Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: <section data-transition=\"zoom\"> <h2>This slide will override the presentation transition and zoom!</h2> </section> <section data-transition-speed=\"fast\"> <h2>Choose from three transition speeds: default, fast or slow!</h2> </section> You can also use different in and out transitions for the same slide: <section data-transition=\"slide\"> The train goes on \u2026 </section> <section data-transition=\"slide\"> and on \u2026 </section> <section data-transition=\"slide-in fade-out\"> and stops. </section> <section data-transition=\"fade-in slide-out\"> (Passengers entering and leaving) </section> <section data-transition=\"slide\"> And it starts again. </section> You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( <section id=\"some-slide\"> ): <a href=\"#/2/2\">Link</a> <a href=\"#/some-slide\">Link</a> You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. <a href=\"#\" class=\"navigate-left\"> <a href=\"#\" class=\"navigate-right\"> <a href=\"#\" class=\"navigate-up\"> <a href=\"#\" class=\"navigate-down\"> <a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide --> <a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide --> Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: <section> <p class=\"fragment grow\">grow</p> <p class=\"fragment shrink\">shrink</p> <p class=\"fragment fade-out\">fade-out</p> <p class=\"fragment fade-up\">fade-up (also down, left and right!)</p> <p class=\"fragment fade-in-then-out\">fades in, then out when we move to the next step</p> <p class=\"fragment fade-in-then-semi-out\">fades in, then obfuscate when we move to the next step</p> <p class=\"fragment highlight-current-blue\">blue only once</p> <p class=\"fragment highlight-red\">highlight-red</p> <p class=\"fragment highlight-green\">highlight-green</p> <p class=\"fragment highlight-blue\">highlight-blue</p> </section> Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. <section> <span class=\"fragment fade-in\"> <span class=\"fragment fade-out\">I'll fade in, then out</span> </span> </section> The display order of fragments can be controlled using the data-fragment-index attribute. <section> <p class=\"fragment\" data-fragment-index=\"3\">Appears last</p> <p class=\"fragment\" data-fragment-index=\"1\">Appears first</p> <p class=\"fragment\" data-fragment-index=\"2\">Appears second</p> </section> Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element. <section> <pre><code data-trim data-noescape> (def lazy-fib (concat [0 1] <mark>((fn rfib [a b]</mark> (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) </code></pre> </section> Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // \"h.v\": horizontal . vertical slide number (default) // \"h/v\": horizontal / vertical slide number // \"c\": flattened slide number // \"c/t\": flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the \"showSlideNumber\" value: // \"all\": show on all views (default) // \"speaker\": only show slide numbers on speaker notes view // \"print\": only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: <video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 <video> / <audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: <section> <h2>This video will use up the remaining space on the slide</h2> <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> </section> Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: <window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: <script> var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); </script> Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: <link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\"> If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=\"Something important\"></section> . When used locally, this feature requires that reveal.js runs from a local web server . <section> <h2>Some Slide</h2> <aside class=\"notes\"> Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). </aside> </section> If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section> # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide <section> by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"assets/custom-js/reveal.js.back.js/#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"assets/custom-js/reveal.js.back.js/#table-of-contents","text":"Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License","title":"Table of contents"},{"location":"assets/custom-js/reveal.js.back.js/#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"assets/custom-js/reveal.js.back.js/#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"assets/custom-js/reveal.js.back.js/#instructions","text":"","title":"Instructions"},{"location":"assets/custom-js/reveal.js.back.js/#markup","text":"Here's a barebones example of a fully working reveal.js presentation: <html> <head> <link rel=\"stylesheet\" href=\"css/reveal.css\"> <link rel=\"stylesheet\" href=\"css/theme/white.css\"> </head> <body> <div class=\"reveal\"> <div class=\"slides\"> <section>Slide 1</section> <section>Slide 2</section> </div> </div> <script src=\"js/reveal.js\"></script> <script> Reveal.initialize(); </script> </body> </html> The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: <div class=\"reveal\"> <div class=\"slides\"> <section>Single Horizontal Slide</section> <section> <section>Vertical Slide 1</section> <section>Vertical Slide 2</section> </section> </div> </div>","title":"Markup"},{"location":"assets/custom-js/reveal.js.back.js/#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). <section data-markdown> <textarea data-template> ## Page title A paragraph with some text and a [link](http://hakim.se). </textarea> </section>","title":"Markdown"},{"location":"assets/custom-js/reveal.js.back.js/#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\" data-charset=\"iso-8859-15\"> <!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --> </section>","title":"External Markdown"},{"location":"assets/custom-js/reveal.js.back.js/#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. <section data-markdown> <script type=\"text/template\"> - Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" --> - Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" --> </script> </section>","title":"Element Attributes"},{"location":"assets/custom-js/reveal.js.back.js/#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown. <section data-markdown> <script type=\"text/template\"> <!-- .slide: data-background=\"#ff0000\" --> Markdown content </script> </section>","title":"Slide Attributes"},{"location":"assets/custom-js/reveal.js.back.js/#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"assets/custom-js/reveal.js.back.js/#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, \"edges\" or \"bottom-right\" controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\" // or \"visible\" controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"assets/custom-js/reveal.js.back.js/#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The \"normal\" size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: \"100%\", height: \"100%\", margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"assets/custom-js/reveal.js.back.js/#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in <section> elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for <code> elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js.","title":"Dependencies"},{"location":"assets/custom-js/reveal.js.back.js/#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"assets/custom-js/reveal.js.back.js/#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: <section data-autoslide=\"2000\"> <p>After 2 seconds the first fragment will be shown.</p> <p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p> <p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p> </section> To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"assets/custom-js/reveal.js.back.js/#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"assets/custom-js/reveal.js.back.js/#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"assets/custom-js/reveal.js.back.js/#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. <section> <img data-src=\"image.png\"> <iframe data-src=\"http://hakim.se\"></iframe> <video> <source data-src=\"video.webm\" type=\"video/webm\" /> <source data-src=\"video.mp4\" type=\"video/mp4\" /> </video> </section>","title":"Lazy Loading"},{"location":"assets/custom-js/reveal.js.back.js/#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"assets/custom-js/reveal.js.back.js/#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"assets/custom-js/reveal.js.back.js/#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"assets/custom-js/reveal.js.back.js/#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"assets/custom-js/reveal.js.back.js/#slide-states","text":"If you set data-state=\"somestate\" on a slide <section> , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"assets/custom-js/reveal.js.back.js/#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"assets/custom-js/reveal.js.back.js/#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . <section data-background-color=\"#ff0000\"> <h2>Color</h2> </section>","title":"Color Backgrounds"},{"location":"assets/custom-js/reveal.js.back.js/#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-image=\"http://example.com/image.png\"> <h2>Image</h2> </section> <section data-background-image=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\"> <h2>This background image will be sized to 100px and repeated</h2> </section>","title":"Image Backgrounds"},{"location":"assets/custom-js/reveal.js.back.js/#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. <section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted> <h2>Video</h2> </section>","title":"Video Backgrounds"},{"location":"assets/custom-js/reveal.js.back.js/#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. <section data-background-iframe=\"https://slides.com\" data-background-interactive> <h2>Iframe</h2> </section>","title":"Iframe Backgrounds"},{"location":"assets/custom-js/reveal.js.back.js/#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"assets/custom-js/reveal.js.back.js/#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"assets/custom-js/reveal.js.back.js/#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: <section data-transition=\"zoom\"> <h2>This slide will override the presentation transition and zoom!</h2> </section> <section data-transition-speed=\"fast\"> <h2>Choose from three transition speeds: default, fast or slow!</h2> </section> You can also use different in and out transitions for the same slide: <section data-transition=\"slide\"> The train goes on \u2026 </section> <section data-transition=\"slide\"> and on \u2026 </section> <section data-transition=\"slide-in fade-out\"> and stops. </section> <section data-transition=\"fade-in slide-out\"> (Passengers entering and leaving) </section> <section data-transition=\"slide\"> And it starts again. </section> You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"assets/custom-js/reveal.js.back.js/#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( <section id=\"some-slide\"> ): <a href=\"#/2/2\">Link</a> <a href=\"#/some-slide\">Link</a> You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. <a href=\"#\" class=\"navigate-left\"> <a href=\"#\" class=\"navigate-right\"> <a href=\"#\" class=\"navigate-up\"> <a href=\"#\" class=\"navigate-down\"> <a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide --> <a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide -->","title":"Internal links"},{"location":"assets/custom-js/reveal.js.back.js/#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: <section> <p class=\"fragment grow\">grow</p> <p class=\"fragment shrink\">shrink</p> <p class=\"fragment fade-out\">fade-out</p> <p class=\"fragment fade-up\">fade-up (also down, left and right!)</p> <p class=\"fragment fade-in-then-out\">fades in, then out when we move to the next step</p> <p class=\"fragment fade-in-then-semi-out\">fades in, then obfuscate when we move to the next step</p> <p class=\"fragment highlight-current-blue\">blue only once</p> <p class=\"fragment highlight-red\">highlight-red</p> <p class=\"fragment highlight-green\">highlight-green</p> <p class=\"fragment highlight-blue\">highlight-blue</p> </section> Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. <section> <span class=\"fragment fade-in\"> <span class=\"fragment fade-out\">I'll fade in, then out</span> </span> </section> The display order of fragments can be controlled using the data-fragment-index attribute. <section> <p class=\"fragment\" data-fragment-index=\"3\">Appears last</p> <p class=\"fragment\" data-fragment-index=\"1\">Appears first</p> <p class=\"fragment\" data-fragment-index=\"2\">Appears second</p> </section>","title":"Fragments"},{"location":"assets/custom-js/reveal.js.back.js/#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"assets/custom-js/reveal.js.back.js/#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element. <section> <pre><code data-trim data-noescape> (def lazy-fib (concat [0 1] <mark>((fn rfib [a b]</mark> (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) </code></pre> </section>","title":"Code syntax highlighting"},{"location":"assets/custom-js/reveal.js.back.js/#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // \"h.v\": horizontal . vertical slide number (default) // \"h/v\": horizontal / vertical slide number // \"c\": flattened slide number // \"c/t\": flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the \"showSlideNumber\" value: // \"all\": show on all views (default) // \"speaker\": only show slide numbers on speaker notes view // \"print\": only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"assets/custom-js/reveal.js.back.js/#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"assets/custom-js/reveal.js.back.js/#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"assets/custom-js/reveal.js.back.js/#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: <video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 <video> / <audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"assets/custom-js/reveal.js.back.js/#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"assets/custom-js/reveal.js.back.js/#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: <section> <h2>This video will use up the remaining space on the slide</h2> <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video> </section> Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"assets/custom-js/reveal.js.back.js/#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: <window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"assets/custom-js/reveal.js.back.js/#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"assets/custom-js/reveal.js.back.js/#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"assets/custom-js/reveal.js.back.js/#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"assets/custom-js/reveal.js.back.js/#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: <script> var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); </script>","title":"Print stylesheet"},{"location":"assets/custom-js/reveal.js.back.js/#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"assets/custom-js/reveal.js.back.js/#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: <link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\"> If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"assets/custom-js/reveal.js.back.js/#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=\"Something important\"></section> . When used locally, this feature requires that reveal.js runs from a local web server . <section> <h2>Some Slide</h2> <aside class=\"notes\"> Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). </aside> </section> If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: <section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section> # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"assets/custom-js/reveal.js.back.js/#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"assets/custom-js/reveal.js.back.js/#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide <section> by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"assets/custom-js/reveal.js.back.js/#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"assets/custom-js/reveal.js.back.js/#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"assets/custom-js/reveal.js.back.js/#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"assets/custom-js/reveal.js.back.js/#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"assets/custom-js/reveal.js.back.js/#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"assets/custom-js/reveal.js.back.js/#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"assets/custom-js/reveal.js.back.js/#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"assets/custom-js/reveal.js.back.js/#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"assets/custom-js/reveal.js.back.js/#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"assets/custom-js/reveal.js.back.js/#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"assets/custom-js/reveal.js.back.js/#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"assets/custom-js/reveal.js.back.js/#license","text":"MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"assets/custom-js/reveal.js.back.js/CONTRIBUTING/","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"assets/custom-js/reveal.js.back.js/CONTRIBUTING/#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"assets/custom-js/reveal.js.back.js/CONTRIBUTING/#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"assets/custom-js/reveal.js.back.js/CONTRIBUTING/#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"assets/custom-js/reveal.js.back.js/CONTRIBUTING/#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"assets/custom-js/reveal.js.back.js/CONTRIBUTING/#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"assets/custom-js/reveal.js.back.js/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"assets/custom-js/reveal.js.back.js/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"assets/custom-js/reveal.js.back.js/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"assets/custom-js/reveal.js.back.js/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"assets/custom-js/reveal.js.back.js/test/simple/","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"assets/custom-js/reveal.js.back.js/test/simple/#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"assets/custom-js/reveal.js.back.js/test/simple/#slide-12","text":"","title":"Slide 1.2"},{"location":"assets/custom-js/reveal.js.back.js/test/simple/#slide-2","text":"","title":"Slide 2"},{"location":"hw/instructions/","text":"Instructions Basics Homeworks will be posted on Canvas after class the day they are assigned, and they will be due before class on the due date. Late homework will not be accepted . Instead, your lowest homework grade will be dropped. Grading TBA. Programming Assignments All programming in Python . Please get familiar with: Python3 Python Notebook (Jupyter) Installation : Most programming assignment will be done in a Python notebook. You can run your code on Google Colab . If you prefer to run your code on your local machine, you should install Anaconda . UMN computing resources: UMN Virtual Online Linux Environment Written Assignments For the written assignments, it is required that you typeset your homeworks in LaTeX . There are many free integrated LATEX editors that are convenient to use (e.g Overleaf ). Collaboration Policy You are encouraged to collaborate with your classmates on homework problems, but each person must write up the final solutions individually. You should note on your homework specifically which problems were a collaborative effort and with whom. You may not search online for solutions. Outside Sources Outside sources are a bit less clear. You should not : Google around for solutions to homework problems. Ask for help on online. Look up things/post on sites like Quora, StackExchange, etc. The Bottom Line If you are unsure about whether a source is permissible, or if you are falling behind in the course and feel a strong temptation to bend these rules, please come talk to us instead.","title":"Instructions"},{"location":"hw/instructions/#instructions","text":"","title":"Instructions"},{"location":"hw/instructions/#basics","text":"Homeworks will be posted on Canvas after class the day they are assigned, and they will be due before class on the due date. Late homework will not be accepted . Instead, your lowest homework grade will be dropped.","title":"Basics"},{"location":"hw/instructions/#grading","text":"TBA.","title":"Grading"},{"location":"hw/instructions/#programming-assignments","text":"All programming in Python . Please get familiar with: Python3 Python Notebook (Jupyter) Installation : Most programming assignment will be done in a Python notebook. You can run your code on Google Colab . If you prefer to run your code on your local machine, you should install Anaconda . UMN computing resources: UMN Virtual Online Linux Environment","title":"Programming Assignments"},{"location":"hw/instructions/#written-assignments","text":"For the written assignments, it is required that you typeset your homeworks in LaTeX . There are many free integrated LATEX editors that are convenient to use (e.g Overleaf ).","title":"Written Assignments"},{"location":"hw/instructions/#collaboration-policy","text":"You are encouraged to collaborate with your classmates on homework problems, but each person must write up the final solutions individually. You should note on your homework specifically which problems were a collaborative effort and with whom. You may not search online for solutions.","title":"Collaboration Policy"},{"location":"hw/instructions/#outside-sources","text":"Outside sources are a bit less clear. You should not : Google around for solutions to homework problems. Ask for help on online. Look up things/post on sites like Quora, StackExchange, etc.","title":"Outside Sources"},{"location":"hw/instructions/#the-bottom-line","text":"If you are unsure about whether a source is permissible, or if you are falling behind in the course and feel a strong temptation to bend these rules, please come talk to us instead.","title":"The Bottom Line"},{"location":"resources/math/","text":"Math Resources Books The Matrix Cookbook by Kaare Brandt Petersen and Michael Syskind Pedersen Calculus by Jerrold E. Marsden and Alan Weinstein Open Courses Introduction to Probability and Statistics Linear Algebra","title":"Math"},{"location":"resources/math/#math-resources","text":"","title":"Math Resources"},{"location":"resources/math/#books","text":"The Matrix Cookbook by Kaare Brandt Petersen and Michael Syskind Pedersen Calculus by Jerrold E. Marsden and Alan Weinstein","title":"Books"},{"location":"resources/math/#open-courses","text":"Introduction to Probability and Statistics Linear Algebra","title":"Open Courses"},{"location":"resources/python/","text":"Python Resources Python Python tutorials PyTorch Check out PyTorch and its tutorials","title":"Python"},{"location":"resources/python/#python-resources","text":"","title":"Python Resources"},{"location":"resources/python/#python","text":"Python tutorials","title":"Python"},{"location":"resources/python/#pytorch","text":"Check out PyTorch and its tutorials","title":"PyTorch"},{"location":"resources/slides/overview/","text":"General Information Logistics Course webpage : https://zstevenwu.com/courses/f19/csci5525/ Course : CSCI 5525, Spring 2020 Location : Keller Hall 3-230 Time : Monday, 6:30 PM -- 9:00 PM Course Staff Instructor: Steven Wu Webpage : https://zstevenwu.com TA: Wei Dai Be nice to TA! Office Hours Steven Wu: Keller Hall 6-225E Monday 4:00 - 5:00 PM Dai Wei: Keller Hall 2-246 Wednesday 1:30 \u2013 2:30 PM Pre-requisite Ideally you will have completed CSCI 5521 or equivalently other introduction to machine learning courses. Background You should also have undergraduate level training or coursework in linear algebra, multivariate calculus, and basic probability and statistics, and programming skills with Python (and Python notebook) FAQ Q : \"I took Andrew Ng's ML course online. Then I have the background for this course, right?\" Communication Canvas Canvas : We will be using Canvas for all assignments and grades. Please also post all questions on Canvas as discussions instead of sending emails. Email Email : Well, I am bad at emails. Not the best way to reach me. Include the substring \u201cCSCI 5525\u201d to begin a meaningful subject line. Please post questions about course material and homework assignments on Canvas first, and then use emails only after an appropriate amount of time has passed without a response. Please use your UMN email account. Homeworks Overview Five homeworks with both written and programming components. Late homeworks will not accepted. No grace days! Your lowest homework score will be dropped. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with. Homework: Written components Derivation and understanding of the algorithms Submission guidelines: All submissions in pdf Please type up your written homeworks using LaTeX . LaTeX is a high-quality typesetting system. We will set up OverLeaf templates. Very easy to use! Homework: Programming components All programming in Python . Please get familiar with: Python3 Python Notebook (Jupyter) Google Colab Grading policy Homework 60% (15% for each homework) Midterm 15% Final 20% Class Participation 5% UNITE UNITE Videos Lectures will be available on UNITE Media Portal (but with a delay) Flu season If you feel sick, consider skipping the lecture. Topics What is ML? \"Machine learning (ML) is the scientific study of algorithms and statistical models that computer systems use to perform a specific task without using explicit instructions, relying on patterns and inference instead.\" --- Wikipedia Page on Machine Learning Supervised learning Labeled examples : $(x_1, y_1), (x_2, y_2), \\ldots (x_n, y_n)$ each $x_i$ is a feature vector (or representation) of an instance (e.g. image, audio, medical record) each $y_i$ is a task-specific label (e.g. cats versus dogs images, male versus female voices, risk of lung cancer) Goal : learn a predictor $\\hat f\\colon X \\rightarrow Y$ based on labeled examples, that accurately predicts the labels of future $x$. Supervised learning topics Linear regression Logistic regression Support vector machines Constrained optimization, Lagrangian duality Margin maximization Non-linear methods: kernels Neural networks Optimization: (Stochastic) gradient descent Probably skipping Nearest neighbors Naive Bayes other stuff you might have seen in CSCI5521 We will not cover the cutting edge of deep learning. We plan to offer a new course dedicated to deep learning in Spring 2020. The problem of over-fitting Suppose we observe data $(x_1, y_1),\\ldots , (x_n, y_n)$ drawn from a distribution. Train the following predictor: $$\\hat f(X)= \\begin{cases} y_i, & \\text{if}\\ X=x_i \\ \\text{\"Gopher!\"}, & \\text{otherwise} \\end{cases}$$ Over-fitting $\\hat f$ has training error = 0, but errs on every example it hasn't seen. Well, except for Gopher. How do we formally study this phenomenon? Machine learning theory Generalization Complexity measures of function classes VC dimension Rademacher complexity Tools: concentration of measure Chernoff bounds Ensemble methods Turning weak learners into strong learners. Boosting method Adaboost Bagging = Bootstrap aggregating Random Forest Generative models Variational Autoencoders (VAE) Generative adversarial nets (GANs) Interactive learning Online learning sequential decision-making e.g. traffic routing, portfolio optimization Multi-armed bandit learning e.g. clinical trials, online advertising, contents recommendation Reinforcement learning learner interacts with the environment e.g. video games, educational software, healthcare decision making, robotics or people-facing applications Readings Most lectures are paired with a reading. These are optional and classes will not exactly follow the readings, but you will get more out of the lectures if you skim the readings beforehand (or afterwards). Books: UML : Understanding Machine Learning: From Theory to Algorithms by Shai Shalev-Shwartz and Shai Ben-David MLaPP : Machine Learning: a Probabilistic Perspective by Kevin Patrick Murphy ESL : The Elements of Statistical Learning: by Trevor Hastie, Robert Tibshirani, and Jerome Friedman Should I buy the books? You are welcome to buy physical copies if you wish---they're good books! But the online versions will suffice for this course.","title":"Lecture 01"},{"location":"resources/slides/overview/#general-information","text":"","title":"General Information"},{"location":"resources/slides/overview/#logistics","text":"Course webpage : https://zstevenwu.com/courses/f19/csci5525/ Course : CSCI 5525, Spring 2020 Location : Keller Hall 3-230 Time : Monday, 6:30 PM -- 9:00 PM","title":"Logistics"},{"location":"resources/slides/overview/#course-staff","text":"Instructor: Steven Wu Webpage : https://zstevenwu.com TA: Wei Dai Be nice to TA!","title":"Course Staff"},{"location":"resources/slides/overview/#office-hours","text":"Steven Wu: Keller Hall 6-225E Monday 4:00 - 5:00 PM Dai Wei: Keller Hall 2-246 Wednesday 1:30 \u2013 2:30 PM","title":"Office Hours"},{"location":"resources/slides/overview/#pre-requisite","text":"Ideally you will have completed CSCI 5521 or equivalently other introduction to machine learning courses.","title":"Pre-requisite"},{"location":"resources/slides/overview/#background","text":"You should also have undergraduate level training or coursework in linear algebra, multivariate calculus, and basic probability and statistics, and programming skills with Python (and Python notebook)","title":"Background"},{"location":"resources/slides/overview/#faq","text":"Q : \"I took Andrew Ng's ML course online. Then I have the background for this course, right?\"","title":"FAQ"},{"location":"resources/slides/overview/#communication","text":"","title":"Communication"},{"location":"resources/slides/overview/#canvas","text":"Canvas : We will be using Canvas for all assignments and grades. Please also post all questions on Canvas as discussions instead of sending emails.","title":"Canvas"},{"location":"resources/slides/overview/#email","text":"Email : Well, I am bad at emails. Not the best way to reach me. Include the substring \u201cCSCI 5525\u201d to begin a meaningful subject line. Please post questions about course material and homework assignments on Canvas first, and then use emails only after an appropriate amount of time has passed without a response. Please use your UMN email account.","title":"Email"},{"location":"resources/slides/overview/#homeworks","text":"","title":"Homeworks"},{"location":"resources/slides/overview/#overview","text":"Five homeworks with both written and programming components. Late homeworks will not accepted. No grace days! Your lowest homework score will be dropped. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with.","title":"Overview"},{"location":"resources/slides/overview/#homework-written-components","text":"Derivation and understanding of the algorithms Submission guidelines: All submissions in pdf Please type up your written homeworks using LaTeX . LaTeX is a high-quality typesetting system. We will set up OverLeaf templates. Very easy to use!","title":"Homework: Written components"},{"location":"resources/slides/overview/#homework-programming-components","text":"All programming in Python . Please get familiar with: Python3 Python Notebook (Jupyter) Google Colab","title":"Homework: Programming components"},{"location":"resources/slides/overview/#grading-policy","text":"Homework 60% (15% for each homework) Midterm 15% Final 20% Class Participation 5%","title":"Grading policy"},{"location":"resources/slides/overview/#unite","text":"","title":"UNITE"},{"location":"resources/slides/overview/#unite-videos","text":"Lectures will be available on UNITE Media Portal (but with a delay)","title":"UNITE Videos"},{"location":"resources/slides/overview/#flu-season","text":"If you feel sick, consider skipping the lecture.","title":"Flu season"},{"location":"resources/slides/overview/#topics","text":"","title":"Topics"},{"location":"resources/slides/overview/#what-is-ml","text":"\"Machine learning (ML) is the scientific study of algorithms and statistical models that computer systems use to perform a specific task without using explicit instructions, relying on patterns and inference instead.\" --- Wikipedia Page on Machine Learning","title":"What is ML?"},{"location":"resources/slides/overview/#supervised-learning","text":"Labeled examples : $(x_1, y_1), (x_2, y_2), \\ldots (x_n, y_n)$ each $x_i$ is a feature vector (or representation) of an instance (e.g. image, audio, medical record) each $y_i$ is a task-specific label (e.g. cats versus dogs images, male versus female voices, risk of lung cancer) Goal : learn a predictor $\\hat f\\colon X \\rightarrow Y$ based on labeled examples, that accurately predicts the labels of future $x$.","title":"Supervised learning"},{"location":"resources/slides/overview/#supervised-learning-topics","text":"Linear regression Logistic regression Support vector machines Constrained optimization, Lagrangian duality Margin maximization Non-linear methods: kernels Neural networks Optimization: (Stochastic) gradient descent","title":"Supervised learning topics"},{"location":"resources/slides/overview/#probably-skipping","text":"Nearest neighbors Naive Bayes other stuff you might have seen in CSCI5521 We will not cover the cutting edge of deep learning. We plan to offer a new course dedicated to deep learning in Spring 2020.","title":"Probably skipping"},{"location":"resources/slides/overview/#the-problem-of-over-fitting","text":"Suppose we observe data $(x_1, y_1),\\ldots , (x_n, y_n)$ drawn from a distribution. Train the following predictor: $$\\hat f(X)= \\begin{cases} y_i, & \\text{if}\\ X=x_i \\ \\text{\"Gopher!\"}, & \\text{otherwise} \\end{cases}$$","title":"The problem of over-fitting"},{"location":"resources/slides/overview/#over-fitting","text":"$\\hat f$ has training error = 0, but errs on every example it hasn't seen. Well, except for Gopher. How do we formally study this phenomenon?","title":"Over-fitting"},{"location":"resources/slides/overview/#machine-learning-theory","text":"Generalization Complexity measures of function classes VC dimension Rademacher complexity Tools: concentration of measure Chernoff bounds","title":"Machine learning theory"},{"location":"resources/slides/overview/#ensemble-methods","text":"Turning weak learners into strong learners. Boosting method Adaboost Bagging = Bootstrap aggregating Random Forest","title":"Ensemble methods"},{"location":"resources/slides/overview/#generative-models","text":"Variational Autoencoders (VAE) Generative adversarial nets (GANs)","title":"Generative models"},{"location":"resources/slides/overview/#interactive-learning","text":"Online learning sequential decision-making e.g. traffic routing, portfolio optimization Multi-armed bandit learning e.g. clinical trials, online advertising, contents recommendation Reinforcement learning learner interacts with the environment e.g. video games, educational software, healthcare decision making, robotics or people-facing applications","title":"Interactive learning"},{"location":"resources/slides/overview/#readings","text":"Most lectures are paired with a reading. These are optional and classes will not exactly follow the readings, but you will get more out of the lectures if you skim the readings beforehand (or afterwards).","title":"Readings"},{"location":"resources/slides/overview/#books","text":"UML : Understanding Machine Learning: From Theory to Algorithms by Shai Shalev-Shwartz and Shai Ben-David MLaPP : Machine Learning: a Probabilistic Perspective by Kevin Patrick Murphy ESL : The Elements of Statistical Learning: by Trevor Hastie, Robert Tibshirani, and Jerome Friedman","title":"Books:"},{"location":"resources/slides/overview/#should-i-buy-the-books","text":"You are welcome to buy physical copies if you wish---they're good books! But the online versions will suffice for this course.","title":"Should I buy the books?"}]}